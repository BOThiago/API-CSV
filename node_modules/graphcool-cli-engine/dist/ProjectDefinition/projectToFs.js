"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs_1 = require("../fs");
require('source-map-support/register');
function projectToFs(project, outputDir, out, files, silent) {
    for (var _i = 0, _a = project.modules; _i < _a.length; _i++) {
        var module_1 = _a[_i];
        moduleToFs(module_1, outputDir, out, files, silent);
    }
}
exports.projectToFs = projectToFs;
function moduleToFs(module, outputDir, out, files, silent) {
    if ((files && files.includes('graphcool.yml') || !files)) {
        var ymlPath = path.join(outputDir, 'graphcool.yml');
        fs_1.default.writeFileSync(ymlPath, module.content);
        // if (!silent) {
        //   out.log(chalk.blue(`Written to graphcool.yml\n`))
        // }
    }
    var fileNames = files ? Object.keys(module.files).filter(function (f) { return files.includes(f); }) : Object.keys(module.files);
    for (var _i = 0, fileNames_1 = fileNames; _i < fileNames_1.length; _i++) {
        var relativePath = fileNames_1[_i];
        var content = module.files[relativePath];
        var filePath = path.join(outputDir, relativePath);
        var dir = path.dirname(filePath);
        var currentFile = null;
        try {
            currentFile = fs_1.default.readFileSync(filePath, 'utf-8');
        }
        catch (e) {
            // ignore if file doesn't exist yet
        }
        fs_1.default.mkdirpSync(dir, { fs: fs_1.default });
        fs_1.default.writeFileSync(filePath, content);
        // if (!silent) {
        //   out.log(chalk.blue(`Written to ${relativePath}\n`))
        // }
    }
}
//# sourceMappingURL=projectToFs.js.map