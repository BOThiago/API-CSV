"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var chalk = require("chalk");
var yaml_1 = require("./yaml");
var fs_1 = require("../fs");
function fsToProject(inputDir, out) {
    return __awaiter(this, void 0, void 0, function () {
        var rootModule, modules, definition, _i, _a, moduleName, modulePath, resolvedModulePath, module_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, fsToModule(path.join(inputDir, 'graphcool.yml'), out)];
                case 1:
                    rootModule = _b.sent();
                    modules = [rootModule];
                    return [4 /*yield*/, yaml_1.readDefinition(rootModule.content, out, 'root')];
                case 2:
                    definition = _b.sent();
                    if (!definition.modules) return [3 /*break*/, 6];
                    _i = 0, _a = Object.keys(definition.modules);
                    _b.label = 3;
                case 3:
                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                    moduleName = _a[_i];
                    modulePath = definition.modules[moduleName];
                    resolvedModulePath = path.join(inputDir, modulePath);
                    return [4 /*yield*/, fsToModule(resolvedModulePath, out, moduleName)];
                case 4:
                    module_1 = _b.sent();
                    modules.push(__assign({}, module_1, { name: moduleName }));
                    _b.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6: return [2 /*return*/, {
                        modules: modules,
                    }];
            }
        });
    });
}
exports.fsToProject = fsToProject;
function fsToModule(inputFile, out, moduleName) {
    if (moduleName === void 0) { moduleName = 'root'; }
    return __awaiter(this, void 0, void 0, function () {
        var inputDir, content, module, files, errors, definition, typesPath, types, messages, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    inputDir = path.dirname(inputFile);
                    content = fs_1.default.readFileSync(inputFile, 'utf-8');
                    module = {
                        name: '',
                        content: content,
                        files: {},
                        baseDir: inputDir,
                    };
                    files = {};
                    errors = [];
                    return [4 /*yield*/, yaml_1.readDefinition(content, out, moduleName)];
                case 1:
                    definition = _b.sent();
                    typesPath = path.join(inputDir, definition.types);
                    if (fs_1.default.existsSync(typesPath)) {
                        types = fs_1.default.readFileSync(typesPath, 'utf-8');
                        files = __assign({}, files, (_a = {}, _a[definition.types] = types, _a));
                    }
                    else {
                        errors.push({
                            message: "The types definition file \"" + typesPath + "\" could not be found.",
                        });
                    }
                    if (definition.permissions) {
                        definition.permissions.forEach(function (permission) {
                            if (permission.query && isGraphQLFile(permission.query)) {
                                var queryPath = path.join(inputDir, permission.query);
                                if (fs_1.default.existsSync(queryPath)) {
                                    var permissionQuery = fs_1.default.readFileSync(queryPath, 'utf-8');
                                    files = __assign({}, files, (_a = {}, _a[permission.query] = permissionQuery, _a));
                                }
                                else {
                                    errors.push({
                                        message: "The file " + permission.query + " for permission query " + permission.operation + " does not exist",
                                    });
                                }
                            }
                            var _a;
                        });
                    }
                    if (definition.functions) {
                        Object.keys(definition.functions).forEach(function (funcName) {
                            var func = definition.functions[funcName];
                            if (func.handler.code && func.handler.code.src) {
                                if (!isFunctionFile(func.handler.code.src)) {
                                    errors.push({
                                        message: "The handler " + func.handler.code
                                            .src + " for function " + funcName + " is not a valid function path. It must end with .js and be in the current working directory.",
                                    });
                                }
                                var handlerPath = path.join(inputDir, func.handler.code.src);
                                if (fs_1.default.existsSync(handlerPath)) {
                                    var functionCode = fs_1.default.readFileSync(handlerPath, 'utf-8');
                                    files = __assign({}, files, (_a = {}, _a[func.handler.code.src] = functionCode, _a));
                                }
                                else {
                                    errors.push({
                                        message: "The file " + func.handler.code
                                            .src + " for function " + funcName + " does not exist",
                                    });
                                }
                            }
                            if (func.query && isGraphQLFile(func.query)) {
                                var queryPath = path.join(inputDir, func.query);
                                if (fs_1.default.existsSync(queryPath)) {
                                    var file = fs_1.default.readFileSync(queryPath, 'utf-8');
                                    files = __assign({}, files, (_b = {}, _b[func.query] = file, _b));
                                }
                                else {
                                    errors.push({
                                        message: "The file " + func.query + " for the subscription query of function " + funcName + " does not exist",
                                    });
                                }
                            }
                            if (func.schema && isGraphQLFile(func.schema)) {
                                var queryPath = path.join(inputDir, func.schema);
                                if (fs_1.default.existsSync(queryPath)) {
                                    var file = fs_1.default.readFileSync(queryPath, 'utf-8');
                                    files = __assign({}, files, (_c = {}, _c[func.schema] = file, _c));
                                }
                                else {
                                    errors.push({
                                        message: "The file " + func.handler.code
                                            .src + " for the schema extension of function " + funcName + " does not exist",
                                    });
                                }
                            }
                            var _a, _b, _c;
                        });
                    }
                    if (errors.length > 0) {
                        out.log(chalk.bold('The following errors occured while reading the graphcool.yml project definition:'));
                        messages = errors.map(function (e) { return "  " + chalk.red(e.message); }).join('\n');
                        out.log(messages + '\n');
                        process.exit(1);
                    }
                    return [2 /*return*/, __assign({}, module, { definition: definition,
                            files: files })];
            }
        });
    });
}
exports.fsToModule = fsToModule;
function isFile(type) {
    return function (content) {
        return new RegExp("." + type + "$").test(content) && !content.startsWith('../');
    };
}
var isGraphQLFile = isFile('graphql');
var isFunctionFile = isFile('js');
//# sourceMappingURL=fsToProject.js.map