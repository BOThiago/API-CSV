import { Config } from '../Config';
import StreamOutput from './StreamOutput';
import * as chalk from 'chalk';
import { ActionBase } from './actions/ActionBase';
import Prompter, { PromptOptions } from './Prompter';
import { TableOptions } from './table';
import { MigrationPrinter } from './migration';
export declare const CustomColors: {
    supports: any;
    gray: (s: string) => any;
    grey: (s: string) => any;
    attachment: (s: string) => any;
    addon: (s: string) => any;
    configVar: (s: string) => any;
    release: (s: string) => any;
    cmd: (s: string) => any;
    app: (s: string) => any;
    graphcool: (s: string) => any;
};
export declare class Output {
    mock: boolean;
    config: Config;
    action: ActionBase;
    stdout: StreamOutput;
    stderr: StreamOutput;
    prompter: Prompter;
    prompt: any;
    migration: MigrationPrinter;
    constructor(config: Config);
    readonly color: chalk & {
        graphcool: (s: string) => string;
    };
    log(data: any, ...args: any[]): void;
    getStyledJSON(obj: any): any;
    done(...rest: void[]): Promise<void>;
    debug(obj: string): void;
    readonly errlog: string;
    readonly autoupdatelog: string;
    error(err: Error | string, exitCode?: number | false): void;
    warn(err: Error | string, prefix?: string): void;
    getPrettyModule(moduleName: string, type?: 'error' | 'warning'): any;
    logError(err: Error | string): void;
    printMarkdown(markdown: string): void;
    oldprompt(name: string, options?: PromptOptions): Promise<string>;
    table<T = {
        height?: number;
    }>(data: T[], options: TableOptions<T>): any;
    exit(code?: number): void;
    tree(dirPath: string, padding?: boolean): void;
}
