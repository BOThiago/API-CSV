"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var figures = require("figures");
var chalk = require("chalk");
var util_1 = require("./util");
var groupBy = require("lodash.groupby");
var MigrationPrinter = (function () {
    function MigrationPrinter(out) {
        this.out = out;
    }
    MigrationPrinter.prototype.printMessages = function (migrationMessages) {
        var _this = this;
        // group types,
        var groupedByType = groupBy(migrationMessages, function (m) { return m.type; });
        Object.keys(groupedByType).forEach(function (type) {
            var typeMessages = groupedByType[type];
            _this.out.log('\n' + printType(type) + '\n');
            var groupedByName = groupBy(typeMessages, function (m) { return m.name.split('.')[0]; });
            Object.keys(groupedByName).forEach(function (name) {
                _this.out.log("  " + chalk.bold(name));
                var nameMessages = groupedByName[name];
                nameMessages.forEach(_this.printMigrationMessage, _this);
            });
        });
        this.out.log('');
    };
    MigrationPrinter.prototype.printErrors = function (errors) {
        var _this = this;
        var groupedByType = groupBy(errors, function (e) { return e.type; });
        Object.keys(groupedByType).forEach(function (type) {
            var typeErrors = groupedByType[type];
            _this.out.log('\n  ' + chalk.bold(type));
            typeErrors.forEach(function (error) {
                var outputMessage = util_1.makePartsEnclodesByCharacterBold(error.description, "`");
                _this.out.log("    " + chalk.red(figures.cross) + " " + outputMessage);
            });
        });
    };
    MigrationPrinter.prototype.printMigrationMessage = function (migrationMessage, index) {
        var _this = this;
        var actionType = this.getType(migrationMessage.description);
        var symbol = this.getSymbol(actionType);
        var description = util_1.makePartsEnclodesByCharacterBold(migrationMessage.description, '`');
        var outputMessage = "   " + symbol + " " + description;
        this.out.log(outputMessage);
        migrationMessage.subDescriptions.forEach(function (subMessage, index2) {
            var actionType2 = _this.getType(subMessage.description);
            var symbol2 = _this.getSymbol(actionType2);
            var outputMessage2 = util_1.makePartsEnclodesByCharacterBold(subMessage.description, '`');
            var lastLine = index2 === migrationMessage.subDescriptions.length - 1;
            var endSymbol = lastLine ? '└' : '├';
            _this.out.log("   " + endSymbol + "\u2500\u2500 " + symbol2 + "  " + outputMessage2);
        });
    };
    MigrationPrinter.prototype.getType = function (message) {
        if (message.indexOf('create') >= 0) {
            return 'create';
        }
        else if (message.indexOf('update') >= 0) {
            return 'update';
        }
        else if (message.indexOf('delete') >= 0 ||
            message.indexOf('remove') >= 0) {
            return 'delete';
        }
        return 'unknown';
    };
    MigrationPrinter.prototype.getSymbol = function (type) {
        switch (type) {
            case 'create':
                return chalk.green('+');
            case 'delete':
                return chalk.red('-');
            case 'update':
                return chalk.blue('*');
            case 'unknown':
                return chalk.cyan('?');
        }
    };
    return MigrationPrinter;
}());
exports.MigrationPrinter = MigrationPrinter;
var spaces = function (n) { return Array(n + 1).join(' '); };
var printType = function (type) {
    return chalk.bold.underline(type.replace(/\b\w/g, function (l) { return l.toUpperCase(); }) + 's');
};
//# sourceMappingURL=migration.js.map