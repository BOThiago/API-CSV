import { GraphQLClient } from 'graphql-request';
import { FunctionInfo, FunctionLog, MigrationResult, PAT, Project, ProjectDefinition, ProjectInfo } from '../types';
import { Config } from '../Config';
export declare class Client {
    client: GraphQLClient;
    config: Config;
    mock: (input: {
        request: any;
        response: any;
    }) => void;
    private mocks;
    constructor(config: Config);
    updateClient(): void;
    createProject(name: string, projectDefinition: ProjectDefinition, alias?: string, region?: string): Promise<ProjectInfo>;
    push(projectId: string, force: boolean, isDryRun: boolean, config: ProjectDefinition): Promise<MigrationResult>;
    fetchProjects(): Promise<Project[]>;
    fetchProjectInfo(projectId: string): Promise<ProjectInfo>;
    getPats(projectId: string): Promise<PAT[]>;
    getFunctions(projectId: string): Promise<FunctionInfo[]>;
    getFunction(projectId: string, functionName: string): Promise<FunctionInfo | null>;
    getFunctionLogs(functionId: string, count?: number): Promise<FunctionLog[] | null>;
    getProjectName(projectId: string): Promise<string>;
    deleteProjects(projectIds: string[]): Promise<string[]>;
    exportProjectData(projectId: string): Promise<string>;
    cloneProject(variables: {
        projectId: string;
        name: string;
        includeMutationCallbacks: boolean;
        includeData: boolean;
    }): Promise<ProjectInfo>;
    checkStatus(instruction: any): Promise<any>;
    private getProjectDefinition(project);
}
