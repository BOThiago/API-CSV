import { Output } from './Output/index';
import { EnvironmentConfig } from './types';
import { Client } from './Client/Client';
import { Config } from './Config';
export declare class Environment {
    env: EnvironmentConfig;
    out: Output;
    client: Client;
    config: Config;
    constructor(out: Output, config: Config, client: Client);
    initEmptyEnvironment(): void;
    readonly default: string | null;
    load(): void;
    save(): void;
    setEnv(name: string, projectId: string): void;
    set(name: string, projectId: string): void;
    setDefault(name: string): void;
    rename(oldName: string, newName: string): void;
    remove(envName: string): void;
    deleteIfExist(projectIds: string[]): void;
    getEnvironment({project, env, skipDefault}: {
        project?: string;
        env?: string;
        skipDefault?: boolean;
    }): Promise<{
        projectId: string | null;
        envName: string | null;
    }>;
    private getEnvironmentName(projectId);
}
