"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var yaml = require("js-yaml");
var fs_1 = require("./fs");
var EnvDoesntExistError_1 = require("./errors/EnvDoesntExistError");
var Environment = (function () {
    function Environment(out, config, client) {
        this.out = out;
        this.config = config;
        this.client = client;
    }
    Environment.prototype.initEmptyEnvironment = function () {
        this.env = {
            default: null,
            environments: {},
        };
    };
    Object.defineProperty(Environment.prototype, "default", {
        get: function () {
            if (this.env.default) {
                return this.env.environments[this.env.default];
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Environment.prototype.load = function () {
        if (fs_1.default.existsSync(this.config.envPath)) {
            try {
                this.env = yaml.safeLoad(fs_1.default.readFileSync(this.config.envPath, 'utf-8'));
            }
            catch (e) {
                this.out.error("Error in .graphcoolrc (" + this.config.envPath + "): " + e.message);
                process.exit(1);
            }
            if (!this.env.environments) {
                this.out.error("Loaded invalid .graphcoolrc from " + this.config.envPath + ": Doesn't contain the 'environments' field");
            }
            if (!this.env.default) {
                this.out.error("Loaded invalid .graphcoolrc from " + this.config.envPath + ": Doesn't contain the 'default' field");
            }
        }
        else {
            this.initEmptyEnvironment();
        }
    };
    Environment.prototype.save = function () {
        var file = yaml.safeDump(this.env);
        fs_1.default.writeFileSync(this.config.envPath, file);
    };
    Environment.prototype.setEnv = function (name, projectId) {
        this.env.environments[name] = projectId;
    };
    Environment.prototype.set = function (name, projectId) {
        this.env.environments[name] = projectId;
    };
    Environment.prototype.setDefault = function (name) {
        if (!this.env.environments[name]) {
            this.out.error(new EnvDoesntExistError_1.EnvDoesntExistError(name));
        }
        this.env.default = name;
    };
    Environment.prototype.rename = function (oldName, newName) {
        var oldEnv = this.env.environments[oldName];
        if (!oldEnv) {
            this.out.error(new EnvDoesntExistError_1.EnvDoesntExistError(oldName));
        }
        delete this.env.environments[oldName];
        this.env.environments[newName] = oldEnv;
        if (this.env.default === oldName) {
            this.setDefault(newName);
        }
    };
    Environment.prototype.remove = function (envName) {
        var oldEnv = this.env.environments[envName];
        if (!oldEnv) {
            this.out.error(new EnvDoesntExistError_1.EnvDoesntExistError(envName));
        }
        delete this.env.environments[envName];
    };
    Environment.prototype.deleteIfExist = function (projectIds) {
        var _this = this;
        projectIds.forEach(function (projectId) {
            var envName = Object.keys(_this.env.environments).find(function (name) { return _this.env.environments[name] === projectId; });
            if (envName) {
                delete _this.env.environments[envName];
            }
            if (_this.env.default === envName) {
                _this.env.default = null;
            }
        });
    };
    Environment.prototype.getEnvironment = function (_a) {
        var project = _a.project, env = _a.env, skipDefault = _a.skipDefault;
        return __awaiter(this, void 0, void 0, function () {
            var projectId, projects, foundProject, resultEnv;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        projectId = null;
                        if (env) {
                            projectId = this.env.environments[env] || null;
                            return [2 /*return*/, {
                                    envName: env,
                                    projectId: projectId,
                                }];
                        }
                        if (!project) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.client.fetchProjects()];
                    case 1:
                        projects = _a.sent();
                        foundProject = projects.find(function (p) { return p.id === project || p.alias === project; });
                        projectId = foundProject ? foundProject.id : null;
                        if (projectId) {
                            resultEnv = this.getEnvironmentName(projectId);
                            return [2 /*return*/, {
                                    projectId: projectId,
                                    envName: resultEnv,
                                }];
                        }
                        _a.label = 2;
                    case 2:
                        if (this.default && !skipDefault) {
                            return [2 /*return*/, {
                                    projectId: this.default,
                                    envName: this.env.default,
                                }];
                        }
                        return [2 /*return*/, {
                                projectId: null,
                                envName: null,
                            }];
                }
            });
        });
    };
    Environment.prototype.getEnvironmentName = function (projectId) {
        var _this = this;
        return (Object.keys(this.env.environments).find(function (key) {
            var projectEnv = _this.env.environments[key];
            return projectEnv === projectId;
        }) || null);
    };
    return Environment;
}());
exports.Environment = Environment;
//# sourceMappingURL=Environment.js.map