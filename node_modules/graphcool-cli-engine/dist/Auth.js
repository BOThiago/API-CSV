"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("isomorphic-fetch");
var cuid = require("cuid");
var opn = require("opn");
var graphql_request_1 = require("graphql-request");
var chalk = require("chalk");
var debug = require('debug')('auth');
var Auth = (function () {
    function Auth(out, config, client) {
        this.authTrigger = 'auth';
        this.out = out;
        this.config = config;
        this.client = client;
    }
    Auth.prototype.setAuthTrigger = function (authTrigger) {
        this.authTrigger = authTrigger;
    };
    Auth.prototype.ensureAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var token, _a, valid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.config.token;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.requestAuthToken()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        token = _a;
                        return [4 /*yield*/, this.validateAuthToken(token)];
                    case 3:
                        valid = _b.sent();
                        if (!valid) {
                            this.out.error("Received invalid token. Please try " + this.out.color.bold('graphcool auth') + " again to get a valid token.");
                            this.out.exit(1);
                        }
                        this.config.setToken(token);
                        this.config.saveToken();
                        this.client.updateClient();
                        // return if we already had a token
                        return [2 /*return*/, !!this.config.token];
                }
            });
        });
    };
    Auth.prototype.setToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var valid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateAuthToken(token)];
                    case 1:
                        valid = _a.sent();
                        if (valid) {
                            this.config.setToken(token);
                        }
                        else {
                            this.config.setToken(null);
                            this.config.saveToken();
                            this.out.error("You provided an invalid token. You can run " + this.out.color.bold('graphcool auth') + " to receive a valid auth token");
                            this.out.exit(1);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Auth.prototype.requestAuthToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliToken, url, endpointUrl, result, json, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cliToken = cuid();
                        url = this.config
                            .authUIEndpoint + "?cliToken=" + cliToken + "&authTrigger=" + this.authTrigger;
                        this.out.log("Auth URL: " + chalk.underline(url));
                        this.out.action.start("Authenticating");
                        return [4 /*yield*/, fetch(this.config.authEndpoint + "/create", {
                                method: 'post',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ cliToken: cliToken }),
                            })];
                    case 1:
                        _a.sent();
                        opn(url);
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 6];
                        endpointUrl = this.config.authEndpoint + "/" + cliToken;
                        return [4 /*yield*/, fetch(endpointUrl)];
                    case 3:
                        result = _a.sent();
                        return [4 /*yield*/, result.json()];
                    case 4:
                        json = _a.sent();
                        authToken = json.authToken;
                        if (authToken) {
                            this.out.action.stop();
                            return [2 /*return*/, authToken];
                        }
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 500); })];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Auth.prototype.validateAuthToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var client, authQuery, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('requesting', this.config.systemAPIEndpoint);
                        debug('token', token);
                        client = new graphql_request_1.GraphQLClient(this.config.systemAPIEndpoint, {
                            headers: {
                                Authorization: "Bearer " + token,
                            },
                        });
                        authQuery = "{\n      viewer {\n        user {\n          id\n          email\n        }\n      }\n    }";
                        return [4 /*yield*/, client.request(authQuery)];
                    case 1:
                        result = _a.sent();
                        if (!result.viewer.user || !result.viewer.user.email) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, result.viewer.user.email];
                }
            });
        });
    };
    return Auth;
}());
exports.Auth = Auth;
//# sourceMappingURL=Auth.js.map