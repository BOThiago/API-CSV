export interface GraphcoolDefinition {
    types: string;
    permissions?: Array<Permission>;
    functions?: {
        [name: string]: FunctionDefinition;
    };
    rootTokens?: string[];
    custom?: any;
}
export interface Permission {
    description?: string;
    isEnabled?: boolean;
    operation: string;
    authenticated?: boolean;
    query?: string;
    fields?: string[];
}
export interface FunctionDefinition {
    handler: FunctionHandler;
    type: FunctionType;
    operation?: string;
    query?: string;
    schema?: string;
}
export interface FunctionHandler {
    webhook?: FunctionHandlerWebhookSource;
    code?: FunctionCode | string;
}
export interface FunctionCode {
    src: string;
    environment?: {
        [envVar: string]: string;
    };
}
export interface FunctionHandlerWebhook {
    webhook: FunctionHandlerWebhookSource;
}
export declare type FunctionHandlerWebhookSource = string | FunctionHandlerWebhookWithHeaders;
export interface FunctionHandlerWebhookWithHeaders {
    url: string;
    headers?: Header[];
}
export interface Header {
    name: string;
    value: string;
}
export declare type FunctionType = 'operationBefore' | 'operationAfter' | 'subscription' | 'httpRequest' | 'httpResponse' | 'resolver';
