"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var chalk_1 = require("chalk");
var differenceBy = require("lodash.differenceby");
var util_1 = require("../../util");
var debug = require('debug')('logs');
var FunctionLogs = /** @class */ (function (_super) {
    __extends(FunctionLogs, _super);
    function FunctionLogs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FunctionLogs.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, tail, target, functionName, id;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.flags, tail = _a.tail, target = _a.target;
                        functionName = this.flags.function;
                        return [4 /*yield*/, this.env.getTarget(target)];
                    case 1:
                        id = (_b.sent()).id;
                        debug("function name " + functionName);
                        debug("service id " + id);
                        return [4 /*yield*/, this.auth.ensureAuth()];
                    case 2:
                        _b.sent();
                        if (!!functionName) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.provideAllFunctionLogs(id, tail)];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.provideSingleFunctionLogs(id, functionName, tail)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FunctionLogs.prototype.provideAllFunctionLogs = function (id, tail) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var logs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.getAllFunctionLogs(id)];
                    case 1:
                        logs = (_a.sent()) || [];
                        if (logs.length === 0) {
                            this.out.log("No messages have been logged in the last 30 min for service " + chalk_1.default.bold(id));
                        }
                        else {
                            logs.sort(util_1.sortByTimestamp);
                            this.out.log(this.prettifyLogs(logs));
                        }
                        if (tail) {
                            setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                var tailLogs, newLogs;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.client.getAllFunctionLogs(id, 50)];
                                        case 1:
                                            tailLogs = _a.sent();
                                            if (tailLogs) {
                                                if (tailLogs.length > 0) {
                                                    newLogs = differenceBy(tailLogs, logs, function (l) { return l.id; });
                                                    if (newLogs.length > 0) {
                                                        newLogs.sort(util_1.sortByTimestamp);
                                                        this.out.log(this.prettifyLogs(newLogs));
                                                        logs = logs.concat(newLogs);
                                                    }
                                                }
                                            }
                                            else {
                                                this.out.log("Service " + id + " can't be found anymore");
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, 4000);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FunctionLogs.prototype.provideSingleFunctionLogs = function (id, functionName, tail) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var fn, logs_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.getFunction(id, functionName)];
                    case 1:
                        fn = _a.sent();
                        if (!!fn) return [3 /*break*/, 2];
                        this.out.error("There is no function with the name " + functionName + ". Run " + chalk_1.default.bold('graphcool functions') + " to list all functions.");
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.client.getFunctionLogs(fn.id)];
                    case 3:
                        logs_1 = (_a.sent()) || [];
                        if (logs_1.length === 0) {
                            this.out.log("No messages have been logged in the last 30 min for function " + chalk_1.default.bold(functionName));
                        }
                        else {
                            logs_1.sort(util_1.sortByTimestamp);
                            this.out.log(this.prettifyLogs(logs_1));
                        }
                        if (tail) {
                            setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                var tailLogs, newLogs;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.client.getFunctionLogs(fn.id, 50)];
                                        case 1:
                                            tailLogs = _a.sent();
                                            if (!(tailLogs === null)) return [3 /*break*/, 3];
                                            return [4 /*yield*/, this.client.getFunction(id, functionName)];
                                        case 2:
                                            fn = _a.sent();
                                            return [3 /*break*/, 4];
                                        case 3:
                                            if (tailLogs.length > 0) {
                                                newLogs = differenceBy(tailLogs, logs_1, function (l) { return l.id; });
                                                if (newLogs.length > 0) {
                                                    newLogs.sort(util_1.sortByTimestamp);
                                                    this.out.log(this.prettifyLogs(newLogs));
                                                    logs_1 = logs_1.concat(newLogs);
                                                }
                                            }
                                            _a.label = 4;
                                        case 4: return [2 /*return*/];
                                    }
                                });
                            }); }, 4000);
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FunctionLogs.prototype.prettifyLogs = function (logs) {
        var _this = this;
        return logs
            .map(function (log) {
            var json = JSON.parse(log.message);
            if (json.event) {
                try {
                    json.event = JSON.parse(json.event);
                }
                catch (e) {
                    // noop
                }
            }
            //
            // const styleLog = (l: string) => {
            //   const logs = this.lambdaToArray(l)
            //   let potentialJson = l.slice(62).trim()
            //   try {
            //     potentialJson = JSON.parse(potentialJson)
            //   } catch (e) {
            //     // noop
            //   }
            //
            //   return {
            //     [l.slice(0, 24)]: potentialJson,
            //   }
            // }
            // if (json.logs) {
            //   json.logs = flatMap(json.logs.map(this.lambdaToArray)).map(styleLog)
            // }
            var prettyMessage = _this.out.getStyledJSON(json);
            var status = log.status === 'SUCCESS' ? 'green' : 'red';
            return chalk_1.default.cyan.bold(log.timestamp) + " " + chalk_1.default.blue.bold(log.duration + "ms") + " " + chalk_1.default.bold[status](log.status) + " " + prettyMessage;
        })
            .join('\n');
    };
    FunctionLogs.prototype.lambdaToArray = function (logs) {
        logs = logs.replace(/\t/g, '  ');
        var regex = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+.*/;
        var lines = logs.split('\n')
            .filter(function (l) { return !l.startsWith('START') && !l.startsWith('END') && !l.startsWith('REPORT'); });
        var merged = lines
            .reduce(function (acc, curr, index) {
            if (lines[index + 1] && lines[index + 1].match(regex)) {
                return {
                    lines: acc.lines.concat(acc.currentLine + (acc.currentLine.length > 0 ? '\n' : '') + curr),
                    currentLine: ''
                };
            }
            else {
                return {
                    lines: acc.lines,
                    currentLine: acc.currentLine + (acc.currentLine.length > 0 ? '\n' : '') + curr,
                };
            }
        }, {
            lines: [],
            currentLine: ''
        });
        return merged.lines.concat(merged.currentLine);
    };
    FunctionLogs.topic = 'logs';
    FunctionLogs.description = 'Output service logs';
    FunctionLogs.group = 'general';
    FunctionLogs.flags = {
        target: graphcool_cli_engine_1.flags.string({
            char: 't',
            description: 'Target to get logs from',
        }),
        tail: graphcool_cli_engine_1.flags.boolean({
            description: 'Tail function logs in realtime',
        }),
        function: graphcool_cli_engine_1.flags.string({
            char: 'f',
            description: 'Name of the function to get the logs from',
        }),
    };
    return FunctionLogs;
}(graphcool_cli_engine_1.Command));
exports.default = FunctionLogs;
//# sourceMappingURL=function.js.map