"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
// import * as globby from 'globby'
var path = require("path");
var debug = require('debug')('ts-builder');
var TypescriptBuilder = /** @class */ (function () {
    function TypescriptBuilder(definitionDir, buildDir) {
        this.definitionDir = definitionDir;
        this.buildDir = buildDir;
    }
    //
    // async getFileNames() {
    //   return globby(['**/*.js', '**/*.ts', '!node_modules', '!**/node_modules'], {cwd: this.buildDir})
    // }
    TypescriptBuilder.prototype.compile = function (fileNames) {
        return __awaiter(this, void 0, void 0, function () {
            var program, emitResult, allDiagnostics;
            return __generator(this, function (_a) {
                // const fileNames = await this.getFileNames()
                debug('starting compile', fileNames);
                program = ts.createProgram(fileNames, this.config);
                debug('created program');
                emitResult = program.emit();
                debug('emitted');
                allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
                allDiagnostics.forEach(function (diagnostic) {
                    if (!diagnostic.file) {
                        console.log(diagnostic);
                    }
                    var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;
                    var message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    console.log(diagnostic.file.fileName + " (" + (line + 1) + "," + (character + 1) + "): " + message);
                });
                if (emitResult.emitSkipped) {
                    throw new Error('Typescript compilation failed');
                }
                return [2 /*return*/, emitResult.emittedFiles];
            });
        });
    };
    Object.defineProperty(TypescriptBuilder.prototype, "config", {
        get: function () {
            return __assign({}, exports.baseCompilerOptions, { lib: ['lib.es2017.d.ts'], rootDir: this.definitionDir, outDir: this.buildDir, typeRoots: [
                    path.join('this-folder', 'does-not-exist'),
                    path.join(__dirname, '../../../../node_modules/@types'),
                    path.join(__dirname, '../../../../../../node_modules/@types'),
                    path.join(this.definitionDir, 'typings'),
                    path.join(this.definitionDir, 'node_modules/@types'),
                ] });
        },
        enumerable: true,
        configurable: true
    });
    return TypescriptBuilder;
}());
exports.default = TypescriptBuilder;
exports.baseCompilerOptions = {
    preserveConstEnums: true,
    strictNullChecks: true,
    sourceMap: false,
    target: ts.ScriptTarget.ES5,
    moduleResolution: ts.ModuleResolutionKind.NodeJs,
    lib: ['lib.es2017.d.ts'],
    allowJs: true,
    listEmittedFiles: true,
    skipLibCheck: true,
    allowSyntheticDefaultImports: true
};
//# sourceMappingURL=TypescriptBuilder.js.map