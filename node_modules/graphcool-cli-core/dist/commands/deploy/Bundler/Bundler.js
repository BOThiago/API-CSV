"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var archiver = require("archiver");
var fs = require("fs-extra");
var path = require("path");
var TypescriptBuilder_1 = require("./TypescriptBuilder");
var debug = require('debug')('bundler');
var lodash_1 = require("lodash");
require("isomorphic-fetch");
var globby = require("globby");
var chalk_1 = require("chalk");
var patterns = ['**/*.graphql', '**/graphcool.yml'].map(function (i) { return "!" + i; });
patterns.unshift('**/*');
var defaultGlobbyOptions = {
    dot: true,
    silent: true,
    follow: true,
    nosort: true,
    mark: true
};
var Bundler = /** @class */ (function () {
    function Bundler(cmd, projectId) {
        this.getBuildFileName = function (src) { return path.posix.join(src.replace(/\.ts$/, '.js')); };
        this.getLambdaHandlerPath = function (fileName) {
            return fileName.slice(0, fileName.length - 3) + '-lambda.js';
        };
        this.getLambdaHandler = function (fileName) {
            return fileName.slice(0, fileName.length - 3) + '-lambda.handle';
        };
        this.getDevHandlerPath = function (fileName) {
            return fileName.slice(0, fileName.length - 3) + '-dev.js';
        };
        this.getBylinePath = function (fileName) { return path.dirname(fileName) + '/byline.js'; };
        this.getEnvPath = function (fileName) {
            return fileName.slice(0, fileName.length - 3) + '.env.json';
        };
        this.out = cmd.out;
        this.definition = cmd.definition;
        this.config = cmd.config;
        this.client = cmd.client;
        this.projectId = projectId;
        this.dotBuildDir = path.join(this.config.definitionDir, '.build/');
        this.buildDir = path.join(this.dotBuildDir, 'dist/');
        this.zipPath = path.join(this.dotBuildDir, 'build.zip');
        debug(this.zipPath);
    }
    Bundler.prototype.getIsDir = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var stat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs.stat(filePath)];
                    case 1:
                        stat = _a.sent();
                        return [2 /*return*/, {
                                filePath: filePath,
                                isDir: stat.isDirectory()
                            }];
                }
            });
        });
    };
    Bundler.prototype.bundle = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var before, builder, zip, write, files, filesToAdd, createdFiles, distFiles, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.definition.functions.length === 0) {
                            return [2 /*return*/, {}];
                        }
                        this.out.action.start('Bundling functions');
                        before = Date.now();
                        fs.removeSync(this.dotBuildDir);
                        fs.mkdirpSync(this.buildDir);
                        builder = new TypescriptBuilder_1.default(this.config.definitionDir, this.buildDir);
                        zip = archiver('zip');
                        write = fs.createWriteStream(this.zipPath);
                        zip.pipe(write);
                        zip.on('error', function (err) {
                            _this.out.error('Error while zipping build: ' + err);
                        });
                        return [4 /*yield*/, globby(['**/*', '!.build', '!*.zip', '!build'], defaultGlobbyOptions)];
                    case 1:
                        files = _a.sent();
                        filesToAdd = lodash_1.difference(files, this.shortFileNamesBlacklist);
                        filesToAdd.forEach(function (file) {
                            zip.file(file, { name: file });
                        });
                        debug('added files', filesToAdd);
                        return [4 /*yield*/, builder.compile(this.fullFileNames)];
                    case 2:
                        createdFiles = _a.sent();
                        debug('converted files', this.fullFileNames);
                        debug('createdFiles', createdFiles);
                        this.generateEnvFiles();
                        this.generateHandlerFiles();
                        return [4 /*yield*/, globby(['**/*', '!.build', '!*.zip'], __assign({}, defaultGlobbyOptions, { cwd: this.buildDir }))];
                    case 3:
                        distFiles = _a.sent();
                        distFiles.forEach(function (file) {
                            var fileName = path.join(_this.buildDir, file);
                            debug('adding', fileName, file);
                            zip.file(fileName, { name: file });
                        });
                        debug('added build files', distFiles);
                        zip.finalize();
                        return [4 /*yield*/, new Promise(function (r) { return write.on('close', function () { return r(); }); })];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 100); })];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.upload()];
                    case 6:
                        url = _a.sent();
                        debug('bundled', Date.now() - before);
                        this.out.action.stop(this.prettyTime(Date.now() - before));
                        if (!this.config.debug) {
                            fs.removeSync(this.dotBuildDir);
                        }
                        return [2 /*return*/, this.getExternalFiles(url)];
                }
            });
        });
    };
    Bundler.prototype.prettyTime = function (time) {
        var output = '';
        if (time > 1000) {
            output = (Math.round(time / 100) / 10).toFixed(1) + 's';
        }
        else {
            output = time + 'ms';
        }
        return chalk_1.default.cyan(output);
    };
    Bundler.prototype.cleanBuild = function () {
        return fs.remove(this.buildDir);
    };
    Bundler.prototype.upload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stream, stats, url, body, res, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stream = fs.createReadStream(this.zipPath);
                        stats = fs.statSync(this.zipPath);
                        return [4 /*yield*/, this.client.getDeployUrl(this.projectId)];
                    case 1:
                        url = _a.sent();
                        debug('uploading to', url);
                        body = stream;
                        return [4 /*yield*/, fetch(url, {
                                method: 'PUT',
                                body: body,
                                headers: {
                                    'Content-Length': stats.size,
                                    'Content-Type': 'application/zip',
                                },
                            })];
                    case 2:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 3:
                        text = _a.sent();
                        debug(text);
                        return [2 /*return*/, url];
                }
            });
        });
    };
    Bundler.prototype.getExternalFiles = function (url) {
        var _this = this;
        return this.definition.functions.reduce(function (acc, fn) {
            var src = typeof fn.fn.handler.code === 'string'
                ? fn.fn.handler.code
                : fn.fn.handler.code.src;
            var buildFileName = _this.getBuildFileName(src);
            var lambdaHandler = _this.getLambdaHandler(buildFileName);
            var devHandler = _this.getDevHandlerPath(buildFileName);
            var externalFile = {
                url: url,
                lambdaHandler: lambdaHandler,
                devHandler: devHandler,
            };
            return __assign({}, acc, (_a = {}, _a[src] = externalFile, _a));
            var _a;
        }, {});
    };
    Bundler.prototype.generateEnvFiles = function () {
        var _this = this;
        this.definition.functions.forEach(function (fn) {
            if (typeof fn.fn.handler.code === 'object') {
                var src = fn.fn.handler.code.src;
                var buildFileName = _this.getBuildFileName(src);
                var envPath = path.join(_this.buildDir, _this.getEnvPath(buildFileName));
                if (fn.fn.handler.code.environment) {
                    var env = JSON.stringify(fn.fn.handler.code.environment);
                    fs.writeFileSync(envPath, env);
                }
            }
        });
    };
    Bundler.prototype.generateHandlerFiles = function () {
        var _this = this;
        this.definition.functions.forEach(function (fn) {
            var src = typeof fn.fn.handler.code === 'string'
                ? fn.fn.handler.code
                : fn.fn.handler.code.src;
            var buildFileName = path.posix.join(_this.buildDir, _this.getBuildFileName(src));
            var lambdaHandlerPath = _this.getLambdaHandlerPath(buildFileName);
            var devHandlerPath = _this.getDevHandlerPath(buildFileName);
            var bylinePath = _this.getBylinePath(buildFileName);
            fs.copySync(path.join(__dirname, './proxies/lambda.js'), lambdaHandlerPath);
            fs.copySync(path.join(__dirname, './proxies/dev.js'), devHandlerPath);
            fs.copySync(path.join(__dirname, './proxies/byline.js'), bylinePath);
        });
    };
    Object.defineProperty(Bundler.prototype, "shortFileNamesBlacklist", {
        get: function () {
            return lodash_1.flatMap(this.definition.functions.map(function (fn) {
                return typeof fn.fn.handler.code === 'string'
                    ? fn.fn.handler.code
                    : fn.fn.handler.code.src;
            })
                .map(function (n) { return n.startsWith('./') ? n.slice(2) : n; })
                .map(function (n) { return n.endsWith('.ts') ? [n.slice(0, n.length - 2) + '.js', n] : n; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bundler.prototype, "fullFileNames", {
        get: function () {
            var _this = this;
            return this.definition.functions.map(function (fn) {
                return path.join(_this.config.definitionDir, typeof fn.fn.handler.code === 'string'
                    ? fn.fn.handler.code
                    : fn.fn.handler.code.src);
            });
        },
        enumerable: true,
        configurable: true
    });
    return Bundler;
}());
exports.default = Bundler;
//# sourceMappingURL=Bundler.js.map