"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var chalk_1 = require("chalk");
var ServiceDoesntExistError_1 = require("../../errors/ServiceDoesntExistError");
var emptyDefinition_1 = require("./emptyDefinition");
var chokidar = require("chokidar");
var inquirer = require("graphcool-inquirer");
var path = require("path");
var Bundler_1 = require("./Bundler/Bundler");
var debug = require('debug')('deploy');
var Deploy = /** @class */ (function (_super) {
    __extends(Deploy, _super);
    function Deploy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.deploying = false;
        return _this;
    }
    Deploy.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a, force, watch, alias, interactive, useDefault, newServiceName, newServiceCluster, dryRun, showedDialog, targetName, target, cluster, foundTarget, projectId, projectIsNew, isLocal, region, newProject, projectName, info;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        debug('run');
                        _a = this.flags, force = _a.force, watch = _a.watch, alias = _a.alias, interactive = _a.interactive;
                        useDefault = this.flags.default;
                        newServiceName = this.flags['new-service'];
                        newServiceCluster = this.flags['new-service-cluster'];
                        dryRun = this.flags['dry-run'];
                        if (dryRun) {
                            return [2 /*return*/, this.dryRun()];
                        }
                        if (newServiceCluster) {
                            this.env.setActiveCluster(newServiceCluster);
                        }
                        showedDialog = false;
                        return [4 /*yield*/, this.env.getTargetWithName(process.env.GRAPHCOOL_TARGET || this.flags.target)
                            // load the definition already so we're able to detect missing package.json / node_modules
                            // if it is a existing project,
                        ];
                    case 1:
                        foundTarget = _b.sent();
                        // load the definition already so we're able to detect missing package.json / node_modules
                        // if it is a existing project,
                        if (interactive) {
                            foundTarget.targetName = null;
                            foundTarget.target = null;
                        }
                        this.definition.checkNodeModules(Boolean(foundTarget.target));
                        if (!(interactive ||
                            (!newServiceCluster && !foundTarget.target) ||
                            (newServiceName && !newServiceCluster))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.clusterSelection()];
                    case 2:
                        cluster = _b.sent();
                        showedDialog = true;
                        this.env.setActiveCluster(cluster);
                        this.env.saveLocalRC();
                        if (cluster === 'local' &&
                            (!this.env.rc.clusters || !this.env.rc.clusters.local)) {
                            this.out.log("You chose the cluster " + chalk_1.default.bold('local') + ", but don't have docker initialized, yet.\nPlease run " + chalk_1.default.green('$ graphcool local up') + " to get a local Graphcool cluster.\n");
                            this.out.exit(1);
                        }
                        _b.label = 3;
                    case 3:
                        if (!(newServiceName ||
                            interactive ||
                            (!foundTarget.targetName && !foundTarget.target))) return [3 /*break*/, 5];
                        targetName = this.flags.target;
                        if (!!targetName) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.targetNameSelector(this.env.getDefaultTargetName(cluster))];
                    case 4:
                        targetName = _b.sent();
                        showedDialog = true;
                        _b.label = 5;
                    case 5:
                        if (!targetName && foundTarget.targetName) {
                            targetName = foundTarget.targetName;
                        }
                        if (!target && foundTarget.target) {
                            target = foundTarget.target;
                        }
                        if (!((!newServiceName && !foundTarget.target) || interactive)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.serviceNameSelector(path.basename(this.config.definitionDir))];
                    case 6:
                        newServiceName = _b.sent();
                        showedDialog = true;
                        _b.label = 7;
                    case 7:
                        if (showedDialog) {
                            this.out.up(3);
                        }
                        return [4 /*yield*/, this.auth.ensureAuth()];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, this.definition.load(__assign({}, this.flags, { target: targetName, cluster: cluster }))];
                    case 9:
                        _b.sent();
                        projectIsNew = false;
                        cluster = cluster
                            ? cluster
                            : target ? target.cluster : this.env.activeCluster;
                        isLocal = !this.env.isSharedCluster(cluster);
                        if (!!target) return [3 /*break*/, 12];
                        // if a specific service has been provided, check for its existence
                        if (target) {
                            this.out.error(new ServiceDoesntExistError_1.ServiceDoesntExistError(target));
                        }
                        region = this.env.getRegionFromCluster(cluster);
                        return [4 /*yield*/, this.createProject(isLocal, cluster, newServiceName, alias, region)];
                    case 10:
                        newProject = _b.sent();
                        projectId = newProject.projectId;
                        projectIsNew = true;
                        // add environment
                        return [4 /*yield*/, this.env.setLocalTarget(targetName, cluster + "/" + projectId)];
                    case 11:
                        // add environment
                        _b.sent();
                        if (!this.env.default || useDefault) {
                            this.env.setLocalDefaultTarget(targetName);
                        }
                        this.env.saveLocalRC();
                        return [3 /*break*/, 13];
                    case 12:
                        projectId = target.id;
                        _b.label = 13;
                    case 13:
                        projectName = newServiceName || targetName;
                        return [4 /*yield*/, this.client.fetchProjectInfo(projectId)];
                    case 14:
                        info = _b.sent();
                        if (!info.isEjected) {
                            this.out.error("Your service " + info.name + " (" + info.id + ") is not yet upgraded.\nPlease go to the console and upgrade it:\nhttps://console.graph.cool/" + encodeURIComponent(info.name) + "/settings/general");
                        }
                        return [4 /*yield*/, this.deploy(projectIsNew, targetName, projectId, isLocal, force, projectName, cluster)];
                    case 15:
                        _b.sent();
                        if (watch) {
                            this.out.log('Watching for change...');
                            chokidar
                                .watch(this.config.definitionDir, { ignoreInitial: true })
                                .on('all', function () {
                                setImmediate(function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (!!this.deploying) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.definition.load(this.flags)];
                                            case 1:
                                                _a.sent();
                                                return [4 /*yield*/, this.deploy(projectIsNew, targetName, projectId, isLocal, force, projectName, cluster)];
                                            case 2:
                                                _a.sent();
                                                this.out.log('Watching for change...');
                                                _a.label = 3;
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.createProject = function (isLocal, cluster, name, alias, region) {
        return __awaiter(this, void 0, void 0, function () {
            var localNote, projectMessage, createdProject;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        localNote = isLocal ? ' locally' : '';
                        this.out.log('');
                        projectMessage = "Creating service " + chalk_1.default.bold(name) + localNote + " in cluster " + cluster;
                        this.out.action.start(projectMessage);
                        return [4 /*yield*/, this.client.createProject(name, emptyDefinition_1.emptyDefinition, alias, region)];
                    case 1:
                        createdProject = _a.sent();
                        this.out.action.stop();
                        return [2 /*return*/, {
                                projectId: createdProject.id,
                            }];
                }
            });
        });
    };
    Deploy.prototype.prettyTime = function (time) {
        var output = '';
        if (time > 1000) {
            output = (Math.round(time / 100) / 10).toFixed(1) + 's';
        }
        else {
            output = time + 'ms';
        }
        return chalk_1.default.cyan(output);
    };
    Deploy.prototype.deploy = function (projectIsNew, targetName, projectId, isLocal, force, projectName, cluster) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var before, bundler, externalFiles, localNote, migrationResult, updateText;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // bundle and add externalFiles
                        debug('bundling');
                        before = Date.now();
                        if (!this.definition.definition.modules[0].definition.functions) return [3 /*break*/, 2];
                        bundler = new Bundler_1.default(this, projectId);
                        return [4 /*yield*/, bundler.bundle()];
                    case 1:
                        externalFiles = _a.sent();
                        bundler.cleanBuild();
                        this.definition.definition.modules[0].externalFiles = externalFiles;
                        Object.keys(externalFiles).forEach(function (key) { return delete _this.definition.definition.modules[0].files[key]; });
                        _a.label = 2;
                    case 2:
                        this.out.action.stop(this.prettyTime(Date.now() - before));
                        debug('bundled');
                        this.deploying = true;
                        localNote = isLocal ? ' locally' : '';
                        before = Date.now();
                        this.out.action.start(projectIsNew
                            ? "Deploying" + localNote
                            : "Deploying to " + chalk_1.default.bold(cluster) + " with target " + chalk_1.default.bold(targetName || cluster + "/" + projectId) + localNote);
                        return [4 /*yield*/, this.client.push(projectId, force, false, this.definition.definition)];
                    case 3:
                        migrationResult = _a.sent();
                        this.out.action.stop(this.prettyTime(Date.now() - before));
                        // no action required
                        if ((!migrationResult.migrationMessages ||
                            migrationResult.migrationMessages.length === 0) &&
                            (!migrationResult.errors || migrationResult.errors.length === 0)) {
                            this.out.log("Everything up-to-date.");
                            this.printEndpoints(projectId);
                            this.deploying = false;
                            return [2 /*return*/];
                        }
                        if (migrationResult.migrationMessages.length > 0) {
                            if (projectIsNew) {
                                this.out.log('\nSuccess! Created the following service:');
                            }
                            else {
                                updateText = migrationResult.errors.length > 0
                                    ? chalk_1.default.red('Error!') + " Here are the potential changes:"
                                    : chalk_1.default.green('Success!') + " Here is what changed:";
                                this.out.log(updateText);
                            }
                            this.out.migration.printMessages(migrationResult.migrationMessages);
                            this.definition.set(migrationResult.projectDefinition);
                        }
                        if (migrationResult.errors.length > 0) {
                            this.out.log(chalk_1.default.rgb(244, 157, 65)("There are issues with the new service definition:"));
                            this.out.migration.printErrors(migrationResult.errors);
                            this.out.log('');
                            process.exitCode = 1;
                        }
                        if (migrationResult.errors &&
                            migrationResult.errors.length > 0 &&
                            migrationResult.errors[0].description.includes("destructive changes")) {
                            // potentially destructive changes
                            this.out.log("Your changes might result in data loss.\n          Use " + chalk_1.default.cyan("`graphcool deploy --force`") + " if you know what you're doing!\n");
                            process.exitCode = 1;
                        }
                        this.deploying = false;
                        this.printEndpoints(projectId);
                        return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.printEndpoints = function (projectId) {
        this.out.log("Here are your GraphQL Endpoints:\n\n  " + chalk_1.default.bold('Simple API:') + "        " + this.env.simpleEndpoint(projectId) + "\n  " + chalk_1.default.bold('Relay API:') + "         " + this.env.relayEndpoint(projectId) + "\n  " + chalk_1.default.bold('Subscriptions API:') + " " + this.env.subscriptionEndpoint(projectId));
    };
    Deploy.prototype.clusterSelection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var localClusters, question, cluster;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        localClusters = Object.keys(this.env.rc.clusters || {}).map(function (clusterName) {
                            return {
                                value: clusterName,
                                name: clusterName,
                            };
                        });
                        if (localClusters.length === 0) {
                            localClusters.push({ value: 'local', name: 'local' });
                        }
                        question = {
                            name: 'cluster',
                            type: 'list',
                            message: 'Please choose the cluster you want to deploy to',
                            choices: [
                                new inquirer.Separator(chalk_1.default.bold('Shared Clusters:')),
                                {
                                    value: 'shared-eu-west-1',
                                    name: 'shared-eu-west-1',
                                },
                                {
                                    value: 'shared-ap-northeast-1',
                                    name: 'shared-ap-northeast-1',
                                },
                                {
                                    value: 'shared-us-west-2',
                                    name: 'shared-us-west-2',
                                },
                                new inquirer.Separator('                     '),
                                new inquirer.Separator(chalk_1.default.bold('Custom clusters (local/private):')),
                            ].concat(localClusters),
                            pageSize: 8,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        cluster = (_a.sent()).cluster;
                        return [2 /*return*/, cluster];
                }
            });
        });
    };
    Deploy.prototype.serviceNameSelector = function (defaultName) {
        return __awaiter(this, void 0, void 0, function () {
            var question, service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'service',
                            type: 'input',
                            message: 'Please choose the service name',
                            default: defaultName,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        service = (_a.sent()).service;
                        return [2 /*return*/, service];
                }
            });
        });
    };
    Deploy.prototype.targetNameSelector = function (defaultName) {
        return __awaiter(this, void 0, void 0, function () {
            var question, target;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'target',
                            type: 'input',
                            message: 'Please choose the target name',
                            default: defaultName,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        target = (_a.sent()).target;
                        return [2 /*return*/, target];
                }
            });
        });
    };
    Deploy.prototype.dryRun = function () {
        return __awaiter(this, void 0, void 0, function () {
            var target, id, targetName, migrationResult, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        target = this.flags.target;
                        return [4 /*yield*/, this.definition.load(this.flags)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.auth.ensureAuth()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.env.getTarget(target)];
                    case 3:
                        id = (_a.sent()).id;
                        targetName = target || 'default';
                        this.out.action.start("Getting diff for " + chalk_1.default.bold(id) + " with target " + chalk_1.default.bold(targetName) + ".");
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.client.push(id, false, true, this.definition.definition)];
                    case 5:
                        migrationResult = _a.sent();
                        this.out.action.stop();
                        // no action required
                        if ((!migrationResult.migrationMessages ||
                            migrationResult.migrationMessages.length === 0) &&
                            (!migrationResult.errors || migrationResult.errors.length === 0)) {
                            this.out.log("Identical service definition for service " + chalk_1.default.bold(id) + " in env " + chalk_1.default.bold(targetName) + ", no action required.\n");
                            return [2 /*return*/];
                        }
                        if (migrationResult.migrationMessages.length > 0) {
                            this.out.log(chalk_1.default.blue("Your service " + chalk_1.default.bold(id) + " of env " + chalk_1.default.bold(targetName) + " has the following changes:"));
                            this.out.migration.printMessages(migrationResult.migrationMessages);
                            this.definition.set(migrationResult.projectDefinition);
                        }
                        if (migrationResult.errors.length > 0) {
                            this.out.log(chalk_1.default.rgb(244, 157, 65)("There are issues with the new service definition:"));
                            this.out.migration.printErrors(migrationResult.errors);
                            this.out.log('');
                            process.exitCode = 1;
                        }
                        if (migrationResult.errors &&
                            migrationResult.errors.length > 0 &&
                            migrationResult.errors[0].description.includes("destructive changes")) {
                            // potentially destructive changes
                            this.out.log("Your changes might result in data loss.\n            Use " + chalk_1.default.cyan("`graphcool deploy --force`") + " if you know what you're doing!\n");
                            process.exitCode = 1;
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        this.out.action.stop();
                        this.out.error(e_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    Deploy.topic = 'deploy';
    Deploy.description = 'Deploy service changes (or new service)';
    Deploy.group = 'general';
    Deploy.allowAnyFlags = true;
    Deploy.help = "\n  \n  " + chalk_1.default.green.bold('Examples:') + "\n      \n" + chalk_1.default.gray('-') + " Deploy local service definition changes to the default stage.\n  " + chalk_1.default.green('$ graphcool deploy') + "\n\n" + chalk_1.default.gray('-') + " Deploy local changes to a specific target called `prod`\n  " + chalk_1.default.green('$ graphcool deploy --target prod') + "\n    \n" + chalk_1.default.gray('-') + " Deploy local changes to a specific target called `prod`, accepting potential data loss caused by schema changes\n  " + chalk_1.default.green('$ graphcool deploy --target production --force') + "\n  ";
    Deploy.flags = {
        target: graphcool_cli_engine_1.flags.string({
            char: 't',
            description: 'Local target, ID or alias of service to deploy',
        }),
        force: graphcool_cli_engine_1.flags.boolean({
            char: 'f',
            description: 'Accept data loss caused by schema changes',
        }),
        watch: graphcool_cli_engine_1.flags.boolean({
            char: 'w',
            description: 'Watch for changes',
        }),
        'new-service': graphcool_cli_engine_1.flags.string({
            char: 'n',
            description: 'Name of the new Service',
        }),
        'new-service-cluster': graphcool_cli_engine_1.flags.string({
            char: 'c',
            description: 'Name of the Cluster to deploy to',
        }),
        alias: graphcool_cli_engine_1.flags.string({
            char: 'a',
            description: 'Service alias',
        }),
        interactive: graphcool_cli_engine_1.flags.boolean({
            char: 'i',
            description: 'Force interactive mode to select the cluster',
        }),
        default: graphcool_cli_engine_1.flags.boolean({
            char: 'D',
            description: 'Set specified target as default',
        }),
        'dry-run': graphcool_cli_engine_1.flags.boolean({
            char: 'd',
            description: 'Perform a dry-run of the deployment',
        }),
        json: graphcool_cli_engine_1.flags.boolean({
            char: 'j',
            description: 'Json Output',
        }),
    };
    return Deploy;
}(graphcool_cli_engine_1.Command));
exports.default = Deploy;
function isValidProjectName(projectName) {
    return /^[A-Z](.*)/.test(projectName);
}
exports.isValidProjectName = isValidProjectName;
//# sourceMappingURL=index.js.map