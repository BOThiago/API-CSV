"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var download = require("download-github-repo");
var cuid = require("scuid");
var path = require("path");
var os = require("os");
var fs = require("fs-extra");
var yaml = require("js-yaml");
var childProcess = require("child_process");
/* tslint:disable-next-line */
var debug = require('debug')('module');
var chalk_1 = require("chalk");
var lodash_1 = require("lodash");
var getbin_1 = require("./getbin");
require("isomorphic-fetch");
var AddTemplate = /** @class */ (function (_super) {
    __extends(AddTemplate, _super);
    function AddTemplate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AddTemplate.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var moduleUrl, _a, repoName, subPath, moduleDirName, tmpDir, e_1, source, relativeModulePath, target, newModulePath, templateYml, newTemplateYml, templateTypesRelativePath, templateTypesPath, templateTypes, newDefinition, newTypes, typesPath, readmePath, readme, readmeUrl;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.definition.load(this.flags)];
                    case 1:
                        _b.sent();
                        moduleUrl = this.argv[0];
                        return [4 /*yield*/, this.extractInfo(moduleUrl)];
                    case 2:
                        _a = _b.sent(), repoName = _a.repoName, subPath = _a.subPath, moduleDirName = _a.moduleDirName;
                        tmpDir = path.join(os.tmpdir(), cuid() + "/");
                        fs.mkdirpSync(tmpDir);
                        return [4 /*yield*/, this.checkUrl(repoName, subPath, moduleUrl)];
                    case 3:
                        _b.sent();
                        this.out.action.start("Downloading template " + chalk_1.default.bold.cyan(moduleUrl) + " from " + chalk_1.default.bold(repoName) + " ");
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, downloadRepo(repoName, tmpDir)];
                    case 5:
                        _b.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _b.sent();
                        if (e_1 === 404) {
                            this.out.error("Github repository " + repoName + " could not be found");
                        }
                        this.out.error(e_1);
                        return [3 /*break*/, 7];
                    case 7:
                        this.out.action.stop();
                        debug("Downloaded " + repoName + " to " + tmpDir);
                        source = path.join(tmpDir, subPath);
                        relativeModulePath = "./src/" + moduleDirName + "/";
                        target = path.join(this.config.definitionDir, relativeModulePath);
                        if (fs.pathExistsSync(target)) {
                            this.out.log("Path " + target + " already exists. Overwriting it now.");
                        }
                        fs.mkdirpSync(target);
                        fs.copySync(path.join(source, './src'), target);
                        newModulePath = path.join(source, 'graphcool.yml');
                        templateYml = fs.readFileSync(newModulePath, 'utf-8');
                        newTemplateYml = templateYml.replace(/src\//g, "src/" + moduleDirName + "/");
                        templateTypesRelativePath = yaml.safeLoad(newTemplateYml).types;
                        templateTypesPath = path.join(source, templateTypesRelativePath);
                        templateTypes = fs.readFileSync(templateTypesPath, 'utf-8');
                        newDefinition = this.definition.mergeDefinition(newTemplateYml, moduleDirName);
                        newTypes = this.definition.mergeTypes(templateTypes, moduleDirName);
                        typesPath = this.definition.definition.modules[0].definition.types;
                        typesPath = Array.isArray(typesPath) ? typesPath[0] : typesPath;
                        return [4 /*yield*/, this.mergePackageJsons(source)];
                    case 8:
                        _b.sent();
                        fs.writeFileSync(path.join(this.config.definitionDir, 'graphcool.yml'), newDefinition);
                        fs.writeFileSync(path.join(this.config.definitionDir, typesPath), newTypes);
                        this.out.log('');
                        this.out.log(chalk_1.default.blue(chalk_1.default.bold('Added') + " all functions & permissions of template " + chalk_1.default.bold(moduleDirName) + " to " + chalk_1.default.bold('graphcool.yml') + " as comments"));
                        this.out.log(chalk_1.default.blue(chalk_1.default.bold('Added') + " all types of template " + chalk_1.default.bold(moduleDirName) + " to " + chalk_1.default.bold(typesPath) + " as comments"));
                        this.out.log(chalk_1.default.blue.bold("Created " + relativeModulePath + ":"));
                        this.out.tree(relativeModulePath, false);
                        readmePath = path.join(source, 'USAGE.md');
                        if (fs.pathExistsSync(readmePath)) {
                            readme = fs.readFileSync(readmePath, 'utf-8');
                            try {
                                readmeUrl = "https://github.com/" + repoName + "/tree/master/" + subPath;
                                this.out.log(chalk_1.default.bold.underline.magenta("Setup Instructions") + '\n');
                                this.out.printMarkdown(readme + ("\n\n[Further Instructions](" + readmeUrl + ")"));
                            }
                            catch (e) {
                                // noop
                            }
                        }
                        fs.removeSync(tmpDir);
                        this.out.log("Please have a look in the " + chalk_1.default.green('graphcool.yml') + " and " + chalk_1.default.green('types.graphql') + " and " + chalk_1.default.bold('uncomment') + " the added template comments there.");
                        return [2 /*return*/];
                }
            });
        });
    };
    AddTemplate.prototype.extractInfo = function (moduleUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var splittedModule, whiteList, res, templates, ghUser, ghRepo, repoName, moduleDirName, subPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        splittedModule = moduleUrl.split('/');
                        whiteList = ['auth', 'misc', 'messaging'];
                        if (!(splittedModule.length === 1)) return [3 /*break*/, 3];
                        return [4 /*yield*/, fetch('https://raw.githubusercontent.com/graphcool/templates/master/templates.json')];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        templates = _a.sent();
                        if (!templates[moduleUrl]) {
                            this.out.error("Could not find template " + chalk_1.default.bold(moduleUrl) + ".\nCheck https://github.com/graphcool/templates for official templates.");
                        }
                        splittedModule = ("graphcool/templates/" + templates[moduleUrl].path).split('/');
                        return [3 /*break*/, 4];
                    case 3:
                        if (splittedModule.length === 2 &&
                            whiteList.includes(splittedModule[0])) {
                            splittedModule = ['graphcool', 'templates'].concat(splittedModule);
                        }
                        _a.label = 4;
                    case 4:
                        ghUser = splittedModule[0];
                        ghRepo = splittedModule[1];
                        repoName = ghUser + "/" + ghRepo;
                        moduleDirName = splittedModule[splittedModule.length - 1];
                        subPath = splittedModule.length > 2 ? splittedModule.slice(2).join('/') : '';
                        return [2 /*return*/, {
                                repoName: repoName,
                                subPath: subPath,
                                moduleDirName: moduleDirName,
                            }];
                }
            });
        });
    };
    AddTemplate.prototype.mergePackageJsons = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var sourcePjsonPath, destPjsonPath, templateJson, serviceJson_1, templateDeps_1, serviceDeps_1, intersect, conflicts, newDependencies, newJson, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('going to merge packagejsons', source);
                        sourcePjsonPath = path.join(source, 'package.json');
                        destPjsonPath = path.join(this.config.definitionDir, 'package.json');
                        debug('source', sourcePjsonPath);
                        debug('dest', destPjsonPath);
                        if (!fs.pathExistsSync(sourcePjsonPath)) return [3 /*break*/, 9];
                        if (!fs.pathExistsSync(destPjsonPath)) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        templateJson = fs.readJSONSync(sourcePjsonPath);
                        serviceJson_1 = fs.readJSONSync(destPjsonPath);
                        templateDeps_1 = templateJson.dependencies || {};
                        serviceDeps_1 = serviceJson_1.dependencies || {};
                        intersect = lodash_1.intersection(Object.keys(serviceDeps_1), Object.keys(templateDeps_1));
                        conflicts = intersect.filter(function (name) {
                            return templateDeps_1[name] !== serviceDeps_1[name];
                        });
                        if (conflicts.length > 0) {
                            this.out.warn("There are conflicts in dependencies for the template package.json and package.json of the current service:");
                            this.out.warn(conflicts.join(', '));
                            this.out.log('Please resolve them by hand. This is the templates package.json:');
                            this.out.log(this.out.getStyledJSON(templateJson));
                        }
                        newDependencies = lodash_1.difference(Object.keys(templateDeps_1), Object.keys(serviceDeps_1));
                        if (!(newDependencies.length > 0)) return [3 /*break*/, 3];
                        if (!serviceJson_1.dependencies) {
                            serviceJson_1.dependencies = {};
                        }
                        newDependencies.forEach(function (name) {
                            serviceJson_1.dependencies[name] = templateDeps_1[name];
                        });
                        if (newDependencies.length === 1) {
                            this.out.log("The dependency " + chalk_1.default.bold(newDependencies.join(', ')) + " has been added to the main package.json");
                        }
                        else if (newDependencies.length > 1) {
                            this.out.log("The dependencies " + chalk_1.default.bold(newDependencies.join(', ')) + " have been added to the main package.json");
                        }
                        newJson = JSON.stringify(serviceJson_1, null, 2);
                        fs.writeFileSync(destPjsonPath, newJson);
                        this.out.log("Written " + chalk_1.default.bold(destPjsonPath) + "\n");
                        return [4 /*yield*/, this.npmInstall()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (conflicts.length === 0 && newDependencies.length === 0) {
                            this.out.log(chalk_1.default.bold('package.json') + ": No new dependencies needed.");
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        this.out.warn(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        this.out.log("There is no package.json yet, so the templates' package.json has been copied");
                        fs.copySync(sourcePjsonPath, destPjsonPath);
                        return [4 /*yield*/, this.npmInstall()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        this.out.log('Path does not exist');
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    AddTemplate.prototype.checkUrl = function (repoName, subPath, moduleUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var githubUrl, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        githubUrl = "https://github.com/" + repoName.split('#')[0] + "/tree/master/" + subPath;
                        debug('fetching', githubUrl);
                        return [4 /*yield*/, fetch(githubUrl)];
                    case 1:
                        result = _a.sent();
                        if (result.status === 404) {
                            this.out.error("Could not find " + moduleUrl + ". Please check if the github repository " + githubUrl + " exists");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AddTemplate.prototype.npmInstall = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var cmdPath, _a, child;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getbin_1.getBinPath('yarn')];
                    case 1:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, getbin_1.getBinPath('npm')];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        cmdPath = _a;
                        child = childProcess.spawn(cmdPath, ['install'], {
                            cwd: this.config.definitionDir,
                        });
                        child.stdout.pipe(process.stdout);
                        child.stderr.pipe(process.stderr);
                        child.on('error', function (err) {
                            _this.out.error(err);
                        });
                        child.on('close', function (code) {
                            if (code !== 0) {
                                reject(code);
                            }
                            else {
                                resolve();
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    };
    AddTemplate.topic = 'add-template';
    AddTemplate.description = 'Add a new template';
    AddTemplate.args = [
        {
            name: 'templateUrl',
            required: true,
        },
    ];
    AddTemplate.help = "\n  \n " + chalk_1.default.green.bold('Examples:') + "\n      \n  " + chalk_1.default.bold('Github Authentication') + "\n  $ " + chalk_1.default.cyan('graphcool add-template auth/github') + "\n\n  " + chalk_1.default.bold('Facebook Authentication') + "\n  $ " + chalk_1.default.cyan('graphcool add-template auth/facebook') + "\n\n  " + chalk_1.default.bold('Send mails with Mailgun') + "\n  $ " + chalk_1.default.cyan('graphcool add-template messaging/mailgun') + "\n\n  " + chalk_1.default.bold('Send SMS with Twilio') + "\n  $ " + chalk_1.default.cyan('graphcool add-template messaging/twilio') + "\n  \n  All templates:\n  https://github.com/graphcool/templates\n  ";
    return AddTemplate;
}(graphcool_cli_engine_1.Command));
exports.default = AddTemplate;
function downloadRepo(repo, destination) {
    return new Promise(function (resolve, reject) {
        download(repo, destination, function (err) {
            if (err) {
                reject(err);
            }
            else {
                resolve();
            }
        });
    });
}
//# sourceMappingURL=add-template.js.map