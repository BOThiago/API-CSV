"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var lodash_1 = require("lodash");
var LocalInvoker_1 = require("../../LocalInvoker");
var path = require("path");
var fs = require("fs-extra");
var util_1 = require("../../util");
var chalk_1 = require("chalk");
var InvokeLocal = /** @class */ (function (_super) {
    __extends(InvokeLocal, _super);
    function InvokeLocal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InvokeLocal.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var target, project, fnName, id, result, fn, module_1, json, invoker, invocationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.ensureAuth()];
                    case 1:
                        _a.sent();
                        target = this.flags.target;
                        project = this.flags.project;
                        fnName = this.flags.function;
                        return [4 /*yield*/, this.env.getTarget(target)];
                    case 2:
                        id = (_a.sent()).id;
                        return [4 /*yield*/, this.definition.load(this.flags)];
                    case 3:
                        _a.sent();
                        result = this.definition.getFunctionAndModule(fnName);
                        if (!!result) return [3 /*break*/, 4];
                        this.out.error("Function \"" + fnName + "\" couldn't be found in graphcool.yml or local modules");
                        return [3 /*break*/, 8];
                    case 4:
                        if (!(!result.fn.handler ||
                            !result.fn.handler.code)) return [3 /*break*/, 5];
                        this.out.error("Function \"" + name + "\" doesn't have a code handler defined, so it can't be executed locally");
                        return [3 /*break*/, 8];
                    case 5:
                        fn = result.fn, module_1 = result.module;
                        return [4 /*yield*/, this.getEvent(id, fnName)
                            // TODO rm any
                        ];
                    case 6:
                        json = _a.sent();
                        invoker = new LocalInvoker_1.LocalInvoker(this.config, this.env, this.out, module_1, fnName, fn);
                        return [4 /*yield*/, invoker.invoke(json)];
                    case 7:
                        invocationResult = _a.sent();
                        this.out.log(chalk_1.default.bold.magenta("\nResult:\n"));
                        this.out.log(this.out.getStyledJSON(invocationResult));
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    InvokeLocal.prototype.getEvent = function (projectId, fnName) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, json, lastEvent, event, jsonPath, jsonFile, lastEventJson, examplesDir, count, lastEventPath, lastSavedEvent, relativeLastEventPath, examplePath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.flags, json = _a.json, lastEvent = _a.lastEvent;
                        if (!json && !lastEvent) {
                            this.out.error("Please provider either --json or --lastEvent to invoke the function locally");
                        }
                        event = {};
                        if (json) {
                            jsonPath = path.join(this.config.definitionDir, json);
                            if (!fs.pathExistsSync(jsonPath)) {
                                this.out.error("Provided json path " + jsonPath + " doesn't exist");
                            }
                            else {
                                jsonFile = fs.readFileSync(jsonPath, 'utf-8');
                                try {
                                    event = JSON.parse(jsonFile);
                                }
                                catch (e) {
                                    this.out.error("Can't parse json of file " + jsonFile + ": " + e.message);
                                }
                            }
                        }
                        if (!lastEvent) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getLastEvent(projectId, fnName)];
                    case 1:
                        lastEventJson = _b.sent();
                        examplesDir = path.join(this.config.definitionDir, "events/" + fnName + "/");
                        fs.mkdirpSync(examplesDir);
                        count = 1;
                        while (fs.pathExistsSync(path.join(examplesDir, count + ".json"))) {
                            count++;
                        }
                        lastEventPath = path.join(examplesDir, count - 1 + ".json");
                        lastSavedEvent = fs.pathExistsSync(lastEventPath) ? fs.readJsonSync(lastEventPath) : null;
                        relativeLastEventPath = void 0;
                        if (count > 1 && lodash_1.isEqual(lastEventJson, lastSavedEvent)) {
                            relativeLastEventPath = "events/" + fnName + "/" + (count - 1) + ".json";
                            this.out.log(chalk_1.default.blue("Using last event of " + chalk_1.default.bold(fnName) + " which is already written to " + chalk_1.default.bold(relativeLastEventPath) + "\n"));
                            event = lastEventJson;
                        }
                        else {
                            examplePath = path.join(examplesDir, count + ".json");
                            fs.writeFileSync(examplePath, JSON.stringify(lastEventJson, null, 2));
                            relativeLastEventPath = "events/" + fnName + "/" + count + ".json";
                            this.out.log(chalk_1.default.blue("Written last event of " + chalk_1.default.bold(fnName) + " to " + chalk_1.default.bold(relativeLastEventPath)));
                            this.out.log(chalk_1.default.blue("To customize the input and have a faster execution, you from now on can use"));
                            this.out.log(chalk_1.default.blue.bold("graphcool invoke-local -f " + fnName + " -j " + relativeLastEventPath + "\n"));
                            event = lastEventJson;
                        }
                        _b.label = 2;
                    case 2:
                        if (!event) {
                            this.out.error("Could not get an input event for the function execution");
                        }
                        return [2 /*return*/, event];
                }
            });
        });
    };
    InvokeLocal.prototype.getLastEvent = function (projectId, fnName) {
        return __awaiter(this, void 0, void 0, function () {
            var fn, logs, foundLog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.getFunction(projectId, fnName)];
                    case 1:
                        fn = _a.sent();
                        if (!!fn) return [3 /*break*/, 2];
                        this.out.error("Function \"" + fnName + "\" is not deployed in project " + projectId);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.client.getFunctionLogs(fn.id, 5)];
                    case 3:
                        logs = _a.sent();
                        if (!logs) {
                            this.out.error("There are no logged events for function " + fnName);
                        }
                        else {
                            logs.sort(util_1.sortByTimestamp).reverse();
                            foundLog = logs
                                .map(function (log) {
                                var json = JSON.parse(log.message);
                                if (json.event) {
                                    try {
                                        json.event = JSON.parse(json.event);
                                    }
                                    catch (e) {
                                        // noop
                                    }
                                }
                                return json;
                            })
                                .find(function (log) {
                                return log && log.event;
                            });
                            if (foundLog) {
                                return [2 /*return*/, foundLog.event];
                            }
                            else {
                                this.out.error("Could not find a valid event for function " + fnName + " in the logs of service " + projectId);
                            }
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    InvokeLocal.topic = 'invoke-local';
    // static command = 'local'
    InvokeLocal.description = 'Invoke a function locally';
    InvokeLocal.group = 'general';
    InvokeLocal.flags = {
        function: graphcool_cli_engine_1.flags.string({
            char: 'f',
            description: 'Name of the function',
            required: true,
        }),
        json: graphcool_cli_engine_1.flags.string({
            char: 'j',
            description: 'Path to the function input .json file',
        }),
        lastEvent: graphcool_cli_engine_1.flags.boolean({
            char: 'l',
            description: 'Download the input event of the last execution to events/FUNCTION/event.json and invoke the function',
        }),
        target: graphcool_cli_engine_1.flags.string({
            char: 't',
            description: 'Target to be deployed',
        }),
    };
    return InvokeLocal;
}(graphcool_cli_engine_1.Command));
exports.default = InvokeLocal;
//# sourceMappingURL=local.js.map