"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var chalk_1 = require("chalk");
var inquirer = require("inquirer");
var lodash_1 = require("lodash");
var util_1 = require("../../util");
var Delete = /** @class */ (function (_super) {
    __extends(Delete, _super);
    function Delete() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Delete.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, target, force, foundTarget, id, projects, question, projectsToDelete, projectIdsToDelete, prettyProjects;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.auth.ensureAuth()];
                    case 1:
                        _b.sent();
                        _a = this.flags, target = _a.target, force = _a.force;
                        return [4 /*yield*/, this.env.getTargetWithName(target)];
                    case 2:
                        foundTarget = _b.sent();
                        if (!(foundTarget && foundTarget.target)) return [3 /*break*/, 8];
                        if (!!this.env.isSharedCluster(foundTarget.target.cluster)) return [3 /*break*/, 3];
                        this.out.error("Can't delete service in local cluster " + foundTarget.target.cluster + ".\nThis command is only available in the hosted version of Graphcool.");
                        return [3 /*break*/, 7];
                    case 3:
                        id = foundTarget.target.id;
                        if (!!force) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.askForConfirmation(id)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        this.out.action.start(chalk_1.default.bold.red('Deleting project') + " " + id);
                        return [4 /*yield*/, this.client.deleteProjects([id])];
                    case 6:
                        _b.sent();
                        this.env.deleteIfExist([id]);
                        this.env.save();
                        this.out.action.stop();
                        _b.label = 7;
                    case 7: return [3 /*break*/, 14];
                    case 8: return [4 /*yield*/, this.client.fetchProjects()];
                    case 9:
                        projects = _b.sent();
                        question = {
                            name: 'projectsToDelete',
                            type: 'checkbox',
                            message: 'Select services to delete',
                            choices: projects.map(function (p) { return ({
                                name: util_1.prettyProject(p),
                                value: p,
                            }); }).concat(new inquirer.Separator(chalk_1.default.bold.green(lodash_1.repeat('-', 50)))),
                            pageSize: Math.min(process.stdout.rows, projects.length) - 2,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 10:
                        projectsToDelete = (_b.sent()).projectsToDelete;
                        projectIdsToDelete = projectsToDelete.map(function (p) { return p.id; });
                        if (projectsToDelete.length === 0) {
                            this.out.log("You didn't select any services to delete, so none will be deleted");
                            this.out.exit(0);
                        }
                        prettyProjects = projectsToDelete.map(util_1.prettyProject).join(', ');
                        if (!!force) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.askForConfirmation(prettyProjects)];
                    case 11:
                        _b.sent();
                        _b.label = 12;
                    case 12:
                        this.out.log('');
                        this.out.action.start(chalk_1.default.red.bold("Deleting service" + (projectsToDelete.length > 1 ? 's' : '')) + " " + prettyProjects);
                        return [4 /*yield*/, this.client.deleteProjects(projectIdsToDelete)];
                    case 13:
                        _b.sent();
                        this.env.deleteIfExist(projectIdsToDelete);
                        this.env.save();
                        this.out.action.stop();
                        _b.label = 14;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    Delete.prototype.askForConfirmation = function (projects) {
        return __awaiter(this, void 0, void 0, function () {
            var confirmationQuestion, confirmation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        confirmationQuestion = {
                            name: 'confirmation',
                            type: 'input',
                            message: "Are you sure that you want to delete " + projects + "? y/N",
                            default: 'n'
                        };
                        return [4 /*yield*/, this.out.prompt(confirmationQuestion)];
                    case 1:
                        confirmation = (_a.sent()).confirmation;
                        if (confirmation.toLowerCase().startsWith('n')) {
                            this.out.exit(0);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Delete.topic = 'delete';
    Delete.description = 'Delete an existing service';
    Delete.hidden = true;
    Delete.group = 'general';
    Delete.flags = {
        target: graphcool_cli_engine_1.flags.string({
            char: 't',
            description: 'Target to delete'
        }),
        force: graphcool_cli_engine_1.flags.boolean({
            char: 'f',
            description: 'Force delete, without confirmation',
        }),
    };
    return Delete;
}(graphcool_cli_engine_1.Command));
exports.default = Delete;
//# sourceMappingURL=index.js.map