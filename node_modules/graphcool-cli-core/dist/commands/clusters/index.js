"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphcool_cli_engine_1 = require("graphcool-cli-engine");
var chalk_1 = require("chalk");
var Clusters = /** @class */ (function (_super) {
    __extends(Clusters, _super);
    function Clusters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Clusters.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, masterToken, name, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.ensureAuth()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.endpointSelector()];
                    case 2:
                        endpoint = _a.sent();
                        return [4 /*yield*/, this.masterTokenSelector()];
                    case 3:
                        masterToken = _a.sent();
                        return [4 /*yield*/, this.nameSelector()];
                    case 4:
                        name = _a.sent();
                        this.out.action.start('Connecting to cluster');
                        return [4 /*yield*/, this.client.authenticateCustomer(endpoint + '/system', masterToken)];
                    case 5:
                        token = (_a.sent()).token;
                        this.env.setGlobalCluster(name, {
                            clusterSecret: token,
                            faasHost: endpoint,
                            host: endpoint,
                        });
                        this.env.saveGlobalRC();
                        this.out.action.stop();
                        this.out.log("Your cluster is set up. Try " + chalk_1.default.green('graphcool deploy --interactive') + " and choose " + chalk_1.default.green(name) + " to deploy to your new cluster.");
                        return [2 /*return*/];
                }
            });
        });
    };
    Clusters.prototype.nameSelector = function () {
        return __awaiter(this, void 0, void 0, function () {
            var question, name;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'name',
                            type: 'input',
                            message: 'Please provide a name for your cluster',
                            defaultValue: 'cluster',
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        name = (_a.sent()).name;
                        return [2 /*return*/, name];
                }
            });
        });
    };
    Clusters.prototype.endpointSelector = function () {
        return __awaiter(this, void 0, void 0, function () {
            var question, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'endpoint',
                            type: 'input',
                            message: 'Please provide the cluster endpoint',
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        endpoint = (_a.sent()).endpoint;
                        return [2 /*return*/, endpoint];
                }
            });
        });
    };
    Clusters.prototype.masterTokenSelector = function () {
        return __awaiter(this, void 0, void 0, function () {
            var question, masterToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'masterToken',
                            type: 'input',
                            message: 'Please provide the master token',
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        masterToken = (_a.sent()).masterToken;
                        return [2 /*return*/, masterToken];
                }
            });
        });
    };
    Clusters.topic = 'clusters';
    Clusters.description = 'Manage your private clusters';
    Clusters.flags = {
        connect: graphcool_cli_engine_1.flags.boolean({
            char: 'c',
            description: 'Target name',
            required: true,
        }),
    };
    return Clusters;
}(graphcool_cli_engine_1.Command));
exports.default = Clusters;
//# sourceMappingURL=index.js.map