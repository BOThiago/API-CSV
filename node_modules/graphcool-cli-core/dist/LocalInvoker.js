"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var BufferedConsole_1 = require("./BufferedConsole");
var getConsoleOutput_1 = require("./getConsoleOutput");
var chalk_1 = require("chalk");
var ts_node_1 = require("ts-node");
var TypescriptBuilder_1 = require("./commands/deploy/Bundler/TypescriptBuilder");
var LocalInvoker = /** @class */ (function () {
    function LocalInvoker(config, env, out, module, fnName, fnDefinition) {
        this.config = config;
        this.env = env;
        this.out = out;
        this.module = module;
        this.fnName = fnName;
        this.fnDefinition = fnDefinition;
    }
    LocalInvoker.prototype.invoke = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var src, functionPath, fnPointer, localConsole, logTmp, errorTmp, warnTmp, infoTmp, result, resultPointer, _a, error_1, buffer;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.injectEnvironment();
                        ts_node_1.register({
                            compilerOptions: __assign({}, TypescriptBuilder_1.baseCompilerOptions, { target: 'es5', moduleResolution: 'node', lib: ['es2017', 'dom'] })
                        });
                        src = typeof this.fnDefinition.handler.code === 'string' ? this.fnDefinition.handler.code : this.fnDefinition.handler.code.src;
                        functionPath = path.join(this.module.baseDir, src);
                        fnPointer = require(functionPath);
                        fnPointer = fnPointer.default || fnPointer;
                        localConsole = new BufferedConsole_1.default();
                        logTmp = console.log;
                        errorTmp = console.error;
                        warnTmp = console.warn;
                        infoTmp = console.info;
                        console.log = localConsole.log;
                        console.error = localConsole.error;
                        console.warn = localConsole.warn;
                        console.info = localConsole.info;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, , 6]);
                        resultPointer = fnPointer(input);
                        if (!(fnPointer.constructor.name === 'Promise')) return [3 /*break*/, 3];
                        return [4 /*yield*/, resultPointer];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = resultPointer;
                        _b.label = 4;
                    case 4:
                        // TODO: Buffer console output like jest does
                        // https://github.com/facebook/jest/blob/6c1016a56dc2d7ba70b428aab6eac2429f8aec7e/packages/jest-cli/src/runTest.js
                        result = _a;
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _b.sent();
                        console.error(error_1);
                        this.out.exit(1);
                        return [3 /*break*/, 6];
                    case 6:
                        console.log = logTmp;
                        console.error = errorTmp;
                        console.warn = warnTmp;
                        console.info = infoTmp;
                        buffer = localConsole.getBuffer();
                        if (buffer.length > 0) {
                            this.out.log(chalk_1.default.bold("Logs:\n"));
                            this.out.log(getConsoleOutput_1.default(this.config.definitionDir, true, buffer));
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    LocalInvoker.prototype.injectEnvironment = function () {
        if (typeof this.fnDefinition.handler.code === 'object') {
            var environment = this.fnDefinition.handler.code.environment;
            if (environment) {
                Object.assign(process.env, environment);
            }
        }
    };
    return LocalInvoker;
}());
exports.LocalInvoker = LocalInvoker;
//# sourceMappingURL=LocalInvoker.js.map